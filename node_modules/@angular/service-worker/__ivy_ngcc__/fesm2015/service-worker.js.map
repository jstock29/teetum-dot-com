{"version":3,"sources":["/Users/jaredstock/Documents/Git/teetum-dot-com/node_modules/@angular/service-worker/fesm2015/service-worker.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqRC,sQAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0DD,8KAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2ID,6LAKC","file":"service-worker.js","sourcesContent":["/**\n * @license Angular v8.0.1\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { isPlatformBrowser } from '@angular/common';\nimport { Injectable, InjectionToken, PLATFORM_ID, APP_INITIALIZER, Injector, NgModule, ApplicationRef } from '@angular/core';\nimport { defer, throwError, fromEvent, of, concat, Subject, NEVER, merge } from 'rxjs';\nimport { map, filter, switchMap, publish, take, tap, delay } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\n/**\n * @param {?} message\n * @return {?}\n */\nfunction errorObservable(message) {\n    return defer((/**\n     * @return {?}\n     */\n    () => throwError(new Error(message))));\n}\n/**\n * \\@publicApi\n */\nclass NgswCommChannel {\n    /**\n     * @param {?} serviceWorker\n     */\n    constructor(serviceWorker) {\n        this.serviceWorker = serviceWorker;\n        if (!serviceWorker) {\n            this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n        }\n        else {\n            /** @type {?} */\n            const controllerChangeEvents = fromEvent(serviceWorker, 'controllerchange');\n            /** @type {?} */\n            const controllerChanges = controllerChangeEvents.pipe(map((/**\n             * @return {?}\n             */\n            () => serviceWorker.controller)));\n            /** @type {?} */\n            const currentController = defer((/**\n             * @return {?}\n             */\n            () => of(serviceWorker.controller)));\n            /** @type {?} */\n            const controllerWithChanges = concat(currentController, controllerChanges);\n            this.worker = controllerWithChanges.pipe(filter((/**\n             * @param {?} c\n             * @return {?}\n             */\n            c => !!c)));\n            this.registration = (/** @type {?} */ ((this.worker.pipe(switchMap((/**\n             * @return {?}\n             */\n            () => serviceWorker.getRegistration()))))));\n            /** @type {?} */\n            const rawEvents = fromEvent(serviceWorker, 'message');\n            /** @type {?} */\n            const rawEventPayload = rawEvents.pipe(map((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => event.data)));\n            /** @type {?} */\n            const eventsUnconnected = rawEventPayload.pipe(filter((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => event && event.type)));\n            /** @type {?} */\n            const events = (/** @type {?} */ (eventsUnconnected.pipe(publish())));\n            events.connect();\n            this.events = events;\n        }\n    }\n    /**\n     * @param {?} action\n     * @param {?} payload\n     * @return {?}\n     */\n    postMessage(action, payload) {\n        return this.worker\n            .pipe(take(1), tap((/**\n         * @param {?} sw\n         * @return {?}\n         */\n        (sw) => {\n            sw.postMessage(Object.assign({ action }, payload));\n        })))\n            .toPromise()\n            .then((/**\n         * @return {?}\n         */\n        () => undefined));\n    }\n    /**\n     * @param {?} type\n     * @param {?} payload\n     * @param {?} nonce\n     * @return {?}\n     */\n    postMessageWithStatus(type, payload, nonce) {\n        /** @type {?} */\n        const waitForStatus = this.waitForStatus(nonce);\n        /** @type {?} */\n        const postMessage = this.postMessage(type, payload);\n        return Promise.all([waitForStatus, postMessage]).then((/**\n         * @return {?}\n         */\n        () => undefined));\n    }\n    /**\n     * @return {?}\n     */\n    generateNonce() { return Math.round(Math.random() * 10000000); }\n    /**\n     * @template T\n     * @param {?} type\n     * @return {?}\n     */\n    eventsOfType(type) {\n        /** @type {?} */\n        const filterFn = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => event.type === type);\n        return this.events.pipe(filter(filterFn));\n    }\n    /**\n     * @template T\n     * @param {?} type\n     * @return {?}\n     */\n    nextEventOfType(type) {\n        return this.eventsOfType(type).pipe(take(1));\n    }\n    /**\n     * @param {?} nonce\n     * @return {?}\n     */\n    waitForStatus(nonce) {\n        return this.eventsOfType('STATUS')\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.nonce === nonce)), take(1), map((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            if (event.status) {\n                return undefined;\n            }\n            throw new Error((/** @type {?} */ (event.error)));\n        })))\n            .toPromise();\n    }\n    /**\n     * @return {?}\n     */\n    get isEnabled() { return !!this.serviceWorker; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Subscribe and listen to push notifications from the Service Worker.\n *\n * \\@publicApi\n */\nclass SwPush {\n    /**\n     * @param {?} sw\n     */\n    constructor(sw) {\n        this.sw = sw;\n        this.subscriptionChanges = new Subject();\n        if (!sw.isEnabled) {\n            this.messages = NEVER;\n            this.notificationClicks = NEVER;\n            this.subscription = NEVER;\n            return;\n        }\n        this.messages = this.sw.eventsOfType('PUSH').pipe(map((/**\n         * @param {?} message\n         * @return {?}\n         */\n        message => message.data)));\n        this.notificationClicks =\n            this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(map((/**\n             * @param {?} message\n             * @return {?}\n             */\n            (message) => message.data)));\n        this.pushManager = this.sw.registration.pipe(map((/**\n         * @param {?} registration\n         * @return {?}\n         */\n        registration => registration.pushManager)));\n        /** @type {?} */\n        const workerDrivenSubscriptions = this.pushManager.pipe(switchMap((/**\n         * @param {?} pm\n         * @return {?}\n         */\n        pm => pm.getSubscription())));\n        this.subscription = merge(workerDrivenSubscriptions, this.subscriptionChanges);\n    }\n    /**\n     * True if the Service Worker is enabled (supported by the browser and enabled via\n     * `ServiceWorkerModule`).\n     * @return {?}\n     */\n    get isEnabled() { return this.sw.isEnabled; }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    requestSubscription(options) {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        /** @type {?} */\n        const pushOptions = { userVisibleOnly: true };\n        /** @type {?} */\n        let key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n        /** @type {?} */\n        let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n        for (let i = 0; i < key.length; i++) {\n            applicationServerKey[i] = key.charCodeAt(i);\n        }\n        pushOptions.applicationServerKey = applicationServerKey;\n        return this.pushManager.pipe(switchMap((/**\n         * @param {?} pm\n         * @return {?}\n         */\n        pm => pm.subscribe(pushOptions))), take(1))\n            .toPromise()\n            .then((/**\n         * @param {?} sub\n         * @return {?}\n         */\n        sub => {\n            this.subscriptionChanges.next(sub);\n            return sub;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribe() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        /** @type {?} */\n        const doUnsubscribe = (/**\n         * @param {?} sub\n         * @return {?}\n         */\n        (sub) => {\n            if (sub === null) {\n                throw new Error('Not subscribed to push notifications.');\n            }\n            return sub.unsubscribe().then((/**\n             * @param {?} success\n             * @return {?}\n             */\n            success => {\n                if (!success) {\n                    throw new Error('Unsubscribe failed!');\n                }\n                this.subscriptionChanges.next(null);\n            }));\n        });\n        return this.subscription.pipe(take(1), switchMap(doUnsubscribe)).toPromise();\n    }\n    /**\n     * @private\n     * @param {?} input\n     * @return {?}\n     */\n    decodeBase64(input) { return atob(input); }\n}\nSwPush.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nSwPush.ctorParameters = () => [\n    { type: NgswCommChannel }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * \\@publicApi\n */\nclass SwUpdate {\n    /**\n     * @param {?} sw\n     */\n    constructor(sw) {\n        this.sw = sw;\n        if (!sw.isEnabled) {\n            this.available = NEVER;\n            this.activated = NEVER;\n            return;\n        }\n        this.available = this.sw.eventsOfType('UPDATE_AVAILABLE');\n        this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n    }\n    /**\n     * True if the Service Worker is enabled (supported by the browser and enabled via\n     * `ServiceWorkerModule`).\n     * @return {?}\n     */\n    get isEnabled() { return this.sw.isEnabled; }\n    /**\n     * @return {?}\n     */\n    checkForUpdate() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        /** @type {?} */\n        const statusNonce = this.sw.generateNonce();\n        return this.sw.postMessageWithStatus('CHECK_FOR_UPDATES', { statusNonce }, statusNonce);\n    }\n    /**\n     * @return {?}\n     */\n    activateUpdate() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        /** @type {?} */\n        const statusNonce = this.sw.generateNonce();\n        return this.sw.postMessageWithStatus('ACTIVATE_UPDATE', { statusNonce }, statusNonce);\n    }\n}\nSwUpdate.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nSwUpdate.ctorParameters = () => [\n    { type: NgswCommChannel }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token that can be used to provide options for `ServiceWorkerModule` outside of\n * `ServiceWorkerModule.register()`.\n *\n * You can use this token to define a provider that generates the registration options at runtime,\n * for example via a function call:\n *\n * {\\@example service-worker/registration-options/module.ts region=\"registration-options\"\n *     header=\"app.module.ts\" linenums=\"false\"}\n *\n * \\@publicApi\n * @abstract\n */\nclass SwRegistrationOptions {\n}\n/** @type {?} */\nconst SCRIPT = new InjectionToken('NGSW_REGISTER_SCRIPT');\n/**\n * @param {?} injector\n * @param {?} script\n * @param {?} options\n * @param {?} platformId\n * @return {?}\n */\nfunction ngswAppInitializer(injector, script, options, platformId) {\n    /** @type {?} */\n    const initializer = (/**\n     * @return {?}\n     */\n    () => {\n        if (!(isPlatformBrowser(platformId) && ('serviceWorker' in navigator) &&\n            options.enabled !== false)) {\n            return;\n        }\n        // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n        // becomes active. This allows the SW to initialize itself even if there is no application\n        // traffic.\n        navigator.serviceWorker.addEventListener('controllerchange', (/**\n         * @return {?}\n         */\n        () => {\n            if (navigator.serviceWorker.controller !== null) {\n                navigator.serviceWorker.controller.postMessage({ action: 'INITIALIZE' });\n            }\n        }));\n        /** @type {?} */\n        let readyToRegister$;\n        if (typeof options.registrationStrategy === 'function') {\n            readyToRegister$ = options.registrationStrategy();\n        }\n        else {\n            const [strategy, ...args] = (options.registrationStrategy || 'registerWhenStable').split(':');\n            switch (strategy) {\n                case 'registerImmediately':\n                    readyToRegister$ = of(null);\n                    break;\n                case 'registerWithDelay':\n                    readyToRegister$ = of(null).pipe(delay(+args[0] || 0));\n                    break;\n                case 'registerWhenStable':\n                    /** @type {?} */\n                    const appRef = injector.get(ApplicationRef);\n                    readyToRegister$ = appRef.isStable.pipe(filter((/**\n                     * @param {?} stable\n                     * @return {?}\n                     */\n                    stable => stable)));\n                    break;\n                default:\n                    // Unknown strategy.\n                    throw new Error(`Unknown ServiceWorker registration strategy: ${options.registrationStrategy}`);\n            }\n        }\n        // Don't return anything to avoid blocking the application until the SW is registered.\n        // Catch and log the error if SW registration fails to avoid uncaught rejection warning.\n        readyToRegister$.pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => navigator.serviceWorker.register(script, { scope: options.scope })\n            .catch((/**\n         * @param {?} err\n         * @return {?}\n         */\n        err => console.error('Service worker registration failed with:', err)))));\n    });\n    return initializer;\n}\n/**\n * @param {?} opts\n * @param {?} platformId\n * @return {?}\n */\nfunction ngswCommChannelFactory(opts, platformId) {\n    return new NgswCommChannel(isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker :\n        undefined);\n}\n/**\n * \\@publicApi\n */\nclass ServiceWorkerModule {\n    /**\n     * Register the given Angular Service Worker script.\n     *\n     * If `enabled` is set to `false` in the given options, the module will behave as if service\n     * workers are not supported by the browser, and the service worker will not be registered.\n     * @param {?} script\n     * @param {?=} opts\n     * @return {?}\n     */\n    static register(script, opts = {}) {\n        return {\n            ngModule: ServiceWorkerModule,\n            providers: [\n                { provide: SCRIPT, useValue: script },\n                { provide: SwRegistrationOptions, useValue: opts },\n                {\n                    provide: NgswCommChannel,\n                    useFactory: ngswCommChannelFactory,\n                    deps: [SwRegistrationOptions, PLATFORM_ID]\n                },\n                {\n                    provide: APP_INITIALIZER,\n                    useFactory: ngswAppInitializer,\n                    deps: [Injector, SCRIPT, SwRegistrationOptions, PLATFORM_ID],\n                    multi: true,\n                },\n            ],\n        };\n    }\n}\nServiceWorkerModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [SwPush, SwUpdate],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgswCommChannel as ɵangular_packages_service_worker_service_worker_a, SCRIPT as ɵangular_packages_service_worker_service_worker_b, ngswAppInitializer as ɵangular_packages_service_worker_service_worker_c, ngswCommChannelFactory as ɵangular_packages_service_worker_service_worker_d, ServiceWorkerModule, SwRegistrationOptions, SwPush, SwUpdate };\n"]}